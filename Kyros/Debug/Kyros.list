
Kyros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f1c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080010b4  080010b4  000110b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010d8  080010d8  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080010d8  080010d8  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010d8  080010d8  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010d8  080010d8  000110d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010dc  080010dc  000110dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080010e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000008  080010e8  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  080010e8  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003c26  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001093  00000000  00000000  00023ca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000448  00000000  00000000  00024d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000314  00000000  00000000  00025180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014fd8  00000000  00000000  00025494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000054f7  00000000  00000000  0003a46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082b33  00000000  00000000  0003f963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000eec  00000000  00000000  000c2498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000c3384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000008 	.word	0x20000008
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800109c 	.word	0x0800109c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000000c 	.word	0x2000000c
 80001d4:	0800109c 	.word	0x0800109c

080001d8 <MX_GPIO_Init>:
#include "config_gpio.h"

void MX_GPIO_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b086      	sub	sp, #24
 80001dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001de:	1d3b      	adds	r3, r7, #4
 80001e0:	2200      	movs	r2, #0
 80001e2:	601a      	str	r2, [r3, #0]
 80001e4:	605a      	str	r2, [r3, #4]
 80001e6:	609a      	str	r2, [r3, #8]
 80001e8:	60da      	str	r2, [r3, #12]
 80001ea:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001ec:	2300      	movs	r3, #0
 80001ee:	603b      	str	r3, [r7, #0]
 80001f0:	4b11      	ldr	r3, [pc, #68]	; (8000238 <MX_GPIO_Init+0x60>)
 80001f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f4:	4a10      	ldr	r2, [pc, #64]	; (8000238 <MX_GPIO_Init+0x60>)
 80001f6:	f043 0302 	orr.w	r3, r3, #2
 80001fa:	6313      	str	r3, [r2, #48]	; 0x30
 80001fc:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <MX_GPIO_Init+0x60>)
 80001fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000200:	f003 0302 	and.w	r3, r3, #2
 8000204:	603b      	str	r3, [r7, #0]
 8000206:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Pin = Button_Pin;
 8000208:	2301      	movs	r3, #1
 800020a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800020c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000210:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000212:	2301      	movs	r3, #1
 8000214:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	4619      	mov	r1, r3
 800021a:	4808      	ldr	r0, [pc, #32]	; (800023c <MX_GPIO_Init+0x64>)
 800021c:	f000 fd76 	bl	8000d0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1U, 1U);
 8000220:	2201      	movs	r2, #1
 8000222:	2101      	movs	r1, #1
 8000224:	2006      	movs	r0, #6
 8000226:	f000 fd46 	bl	8000cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800022a:	2006      	movs	r0, #6
 800022c:	f000 fd5f 	bl	8000cee <HAL_NVIC_EnableIRQ>
}
 8000230:	bf00      	nop
 8000232:	3718      	adds	r7, #24
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	40023800 	.word	0x40023800
 800023c:	40020400 	.word	0x40020400

08000240 <task1>:
semaphore_t critical_region_B;

uint32_t aux_tick = 0;
uint8_t pin_state = 0;

void task1(){
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
    while(1){

        //pin_state = HAL_GPIO_ReadPin(Button_GPIO_Port, GPIO_PIN_0);

        cont_task_1 = 0;
 8000244:	4b08      	ldr	r3, [pc, #32]	; (8000268 <task1+0x28>)
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
		while(cont_task_1 < ONE_SEC_IN_CONT)
 800024a:	e004      	b.n	8000256 <task1+0x16>
			cont_task_1++;
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <task1+0x28>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	3301      	adds	r3, #1
 8000252:	4a05      	ldr	r2, [pc, #20]	; (8000268 <task1+0x28>)
 8000254:	6013      	str	r3, [r2, #0]
		while(cont_task_1 < ONE_SEC_IN_CONT)
 8000256:	4b04      	ldr	r3, [pc, #16]	; (8000268 <task1+0x28>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4a04      	ldr	r2, [pc, #16]	; (800026c <task1+0x2c>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d9f5      	bls.n	800024c <task1+0xc>


        OS_wait_next_period();
 8000260:	f000 f890 	bl	8000384 <OS_wait_next_period>
        cont_task_1 = 0;
 8000264:	e7ee      	b.n	8000244 <task1+0x4>
 8000266:	bf00      	nop
 8000268:	20000024 	.word	0x20000024
 800026c:	0006cffe 	.word	0x0006cffe

08000270 <main>:
		cont_aperiodic_task_1++;

	OS_finished_aperiodic_task();
}

int main() {
 8000270:	b580      	push	{r7, lr}
 8000272:	b0a8      	sub	sp, #160	; 0xa0
 8000274:	af00      	add	r7, sp, #0
	uint32_t stack_idleThread[40];

    // start the OS
    OS_init(stack_idleThread, sizeof(stack_idleThread));
 8000276:	463b      	mov	r3, r7
 8000278:	21a0      	movs	r1, #160	; 0xa0
 800027a:	4618      	mov	r0, r3
 800027c:	f000 f866 	bl	800034c <OS_init>

    parameters_periodic_task_1.deadline_absolute = 150;
 8000280:	4b18      	ldr	r3, [pc, #96]	; (80002e4 <main+0x74>)
 8000282:	2296      	movs	r2, #150	; 0x96
 8000284:	601a      	str	r2, [r3, #0]
    parameters_periodic_task_1.deadline_dinamic = 150;
 8000286:	4b17      	ldr	r3, [pc, #92]	; (80002e4 <main+0x74>)
 8000288:	2296      	movs	r2, #150	; 0x96
 800028a:	605a      	str	r2, [r3, #4]
    parameters_periodic_task_1.period_absolute = 150;
 800028c:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <main+0x74>)
 800028e:	2296      	movs	r2, #150	; 0x96
 8000290:	609a      	str	r2, [r3, #8]
    parameters_periodic_task_1.period_dinamic = 150;
 8000292:	4b14      	ldr	r3, [pc, #80]	; (80002e4 <main+0x74>)
 8000294:	2296      	movs	r2, #150	; 0x96
 8000296:	60da      	str	r2, [r3, #12]

    parameters_periodic_task_2.deadline_absolute = 2700;
 8000298:	4b13      	ldr	r3, [pc, #76]	; (80002e8 <main+0x78>)
 800029a:	f640 228c 	movw	r2, #2700	; 0xa8c
 800029e:	601a      	str	r2, [r3, #0]
    parameters_periodic_task_2.deadline_dinamic = 2700;
 80002a0:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <main+0x78>)
 80002a2:	f640 228c 	movw	r2, #2700	; 0xa8c
 80002a6:	605a      	str	r2, [r3, #4]
    parameters_periodic_task_2.period_absolute = 2700;
 80002a8:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <main+0x78>)
 80002aa:	f640 228c 	movw	r2, #2700	; 0xa8c
 80002ae:	609a      	str	r2, [r3, #8]
    parameters_periodic_task_2.period_dinamic = 2700;
 80002b0:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <main+0x78>)
 80002b2:	f640 228c 	movw	r2, #2700	; 0xa8c
 80002b6:	60da      	str	r2, [r3, #12]

    struct_task1.TCB_thread.task_parameters = &parameters_periodic_task_1;
 80002b8:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <main+0x7c>)
 80002ba:	4a0a      	ldr	r2, [pc, #40]	; (80002e4 <main+0x74>)
 80002bc:	60da      	str	r2, [r3, #12]
    struct_task2.TCB_thread.task_parameters = &parameters_periodic_task_2;
 80002be:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <main+0x80>)
 80002c0:	4a09      	ldr	r2, [pc, #36]	; (80002e8 <main+0x78>)
 80002c2:	60da      	str	r2, [r3, #12]

    OSPeriodic_task_start(&struct_task1.TCB_thread, 
 80002c4:	23a0      	movs	r3, #160	; 0xa0
 80002c6:	4a0b      	ldr	r2, [pc, #44]	; (80002f4 <main+0x84>)
 80002c8:	490b      	ldr	r1, [pc, #44]	; (80002f8 <main+0x88>)
 80002ca:	4808      	ldr	r0, [pc, #32]	; (80002ec <main+0x7c>)
 80002cc:	f000 f972 	bl	80005b4 <OSPeriodic_task_start>

    semaphore_init(&critical_region_A, 1, 1);
    semaphore_init(&critical_region_B, 1, 1);
*/

    MX_GPIO_Init();
 80002d0:	f7ff ff82 	bl	80001d8 <MX_GPIO_Init>

    OS_run();
 80002d4:	f000 f8ca 	bl	800046c <OS_run>
 80002d8:	2300      	movs	r3, #0
}
 80002da:	4618      	mov	r0, r3
 80002dc:	37a0      	adds	r7, #160	; 0xa0
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	200001a0 	.word	0x200001a0
 80002e8:	200001b0 	.word	0x200001b0
 80002ec:	20000028 	.word	0x20000028
 80002f0:	200000e4 	.word	0x200000e4
 80002f4:	20000044 	.word	0x20000044
 80002f8:	08000241 	.word	0x08000241

080002fc <HAL_GPIO_EXTI_Callback>:

uint32_t previousTick = 0;
uint32_t ky=0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	80fb      	strh	r3, [r7, #6]

	uint32_t currentTick = HAL_GetTick();
 8000306:	f000 fc41 	bl	8000b8c <HAL_GetTick>
 800030a:	60f8      	str	r0, [r7, #12]
	if (GPIO_Pin == GPIO_PIN_0 && (currentTick - previousTick) > 10){
 800030c:	88fb      	ldrh	r3, [r7, #6]
 800030e:	2b01      	cmp	r3, #1
 8000310:	d10d      	bne.n	800032e <HAL_GPIO_EXTI_Callback+0x32>
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	1ad3      	subs	r3, r2, r3
 800031a:	2b0a      	cmp	r3, #10
 800031c:	d907      	bls.n	800032e <HAL_GPIO_EXTI_Callback+0x32>
		previousTick = currentTick;
 800031e:	4a06      	ldr	r2, [pc, #24]	; (8000338 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	6013      	str	r3, [r2, #0]
		ky++;
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <HAL_GPIO_EXTI_Callback+0x40>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	3301      	adds	r3, #1
 800032a:	4a04      	ldr	r2, [pc, #16]	; (800033c <HAL_GPIO_EXTI_Callback+0x40>)
 800032c:	6013      	str	r3, [r2, #0]
	}
}
 800032e:	bf00      	nop
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	200001c0 	.word	0x200001c0
 800033c:	200001c4 	.word	0x200001c4

08000340 <main_idleThread>:

#define LOG2(x) (32U - __builtin_clz(x))


OSThread idleThread;
void main_idleThread() {
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
    while (1) {
        OS_onIdle();
 8000344:	f000 fb3c 	bl	80009c0 <OS_onIdle>
 8000348:	e7fc      	b.n	8000344 <main_idleThread+0x4>
	...

0800034c <OS_init>:
    }
}

void OS_init(void *stkSto, uint32_t stkSize) {
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	6039      	str	r1, [r7, #0]
    /* set the PendSV interrupt priority to the lowest level 0xFF */
    *(uint32_t volatile *)0xE000ED20 |= (0xFFU << 16);
 8000356:	4b08      	ldr	r3, [pc, #32]	; (8000378 <OS_init+0x2c>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a07      	ldr	r2, [pc, #28]	; (8000378 <OS_init+0x2c>)
 800035c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8000360:	6013      	str	r3, [r2, #0]

    /* start idleThread thread */
    OSPeriodic_task_start(&idleThread,
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	687a      	ldr	r2, [r7, #4]
 8000366:	4905      	ldr	r1, [pc, #20]	; (800037c <OS_init+0x30>)
 8000368:	4805      	ldr	r0, [pc, #20]	; (8000380 <OS_init+0x34>)
 800036a:	f000 f923 	bl	80005b4 <OSPeriodic_task_start>
                   &main_idleThread,
                   stkSto, stkSize);
}
 800036e:	bf00      	nop
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	e000ed20 	.word	0xe000ed20
 800037c:	08000341 	.word	0x08000341
 8000380:	20000238 	.word	0x20000238

08000384 <OS_wait_next_period>:

// Calculate the next task index (the position in OS_Thread array of next task) 

void OS_wait_next_period(){
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800038a:	b672      	cpsid	i
}
 800038c:	bf00      	nop
    __disable_irq();
    
    uint8_t bit = (1U << (OS_curr->prio - 1U));
 800038e:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <OS_wait_next_period+0x48>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	7a1b      	ldrb	r3, [r3, #8]
 8000394:	3b01      	subs	r3, #1
 8000396:	2201      	movs	r2, #1
 8000398:	fa02 f303 	lsl.w	r3, r2, r3
 800039c:	71fb      	strb	r3, [r7, #7]
    OS_readySet   &= ~bit;  /* insert to set */
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	43db      	mvns	r3, r3
 80003a2:	461a      	mov	r2, r3
 80003a4:	4b0a      	ldr	r3, [pc, #40]	; (80003d0 <OS_wait_next_period+0x4c>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4013      	ands	r3, r2
 80003aa:	4a09      	ldr	r2, [pc, #36]	; (80003d0 <OS_wait_next_period+0x4c>)
 80003ac:	6013      	str	r3, [r2, #0]
    OS_waiting_next_periodSet |= bit; /* remove from set */
 80003ae:	79fa      	ldrb	r2, [r7, #7]
 80003b0:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <OS_wait_next_period+0x50>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4313      	orrs	r3, r2
 80003b6:	4a07      	ldr	r2, [pc, #28]	; (80003d4 <OS_wait_next_period+0x50>)
 80003b8:	6013      	str	r3, [r2, #0]

    OS_sched();
 80003ba:	f000 f80d 	bl	80003d8 <OS_sched>
  __ASM volatile ("cpsie i" : : : "memory");
 80003be:	b662      	cpsie	i
}
 80003c0:	bf00      	nop
    __enable_irq();
}
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	200001c8 	.word	0x200001c8
 80003d0:	20000228 	.word	0x20000228
 80003d4:	20000230 	.word	0x20000230

080003d8 <OS_sched>:
    OS_sched();
    __enable_irq();
}


void OS_sched(void) {
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
    OSThread *next;
    uint8_t OS_Periodic_task_running_index = LOG2(OS_readySet);
 80003de:	4b1b      	ldr	r3, [pc, #108]	; (800044c <OS_sched+0x74>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	fab3 f383 	clz	r3, r3
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	f1c3 0320 	rsb	r3, r3, #32
 80003ec:	70fb      	strb	r3, [r7, #3]

    // If there is not any periodic task ready to sched
    if (OS_Periodic_task_running_index == 0U) {
 80003ee:	78fb      	ldrb	r3, [r7, #3]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d10b      	bne.n	800040c <OS_sched+0x34>

        // If there is an aperiodic task to be executable 
        if (number_aperiodic_tasks){
 80003f4:	4b16      	ldr	r3, [pc, #88]	; (8000450 <OS_sched+0x78>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d003      	beq.n	8000404 <OS_sched+0x2c>
            next = OS_aperiodic_tasks[0];
 80003fc:	4b15      	ldr	r3, [pc, #84]	; (8000454 <OS_sched+0x7c>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	607b      	str	r3, [r7, #4]
 8000402:	e008      	b.n	8000416 <OS_sched+0x3e>

        } else {
            next = OS_tasks[0]; /* the idle thread */
 8000404:	4b14      	ldr	r3, [pc, #80]	; (8000458 <OS_sched+0x80>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	607b      	str	r3, [r7, #4]
 800040a:	e004      	b.n	8000416 <OS_sched+0x3e>
        }

    } else {
        next = OS_tasks[OS_Periodic_task_running_index];
 800040c:	78fb      	ldrb	r3, [r7, #3]
 800040e:	4a12      	ldr	r2, [pc, #72]	; (8000458 <OS_sched+0x80>)
 8000410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000414:	607b      	str	r3, [r7, #4]
    }

    Q_ASSERT(next != (OSThread *)0);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d103      	bne.n	8000424 <OS_sched+0x4c>
 800041c:	2181      	movs	r1, #129	; 0x81
 800041e:	480f      	ldr	r0, [pc, #60]	; (800045c <OS_sched+0x84>)
 8000420:	f000 fad5 	bl	80009ce <Q_onAssert>

    /* trigger PendSV, if needed */
    if (next != OS_curr) {
 8000424:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <OS_sched+0x88>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	429a      	cmp	r2, r3
 800042c:	d00a      	beq.n	8000444 <OS_sched+0x6c>
        OS_next = next;
 800042e:	4a0d      	ldr	r2, [pc, #52]	; (8000464 <OS_sched+0x8c>)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	6013      	str	r3, [r2, #0]
        //*(uint32_t volatile *)0xE000ED04 = (1U << 28);
        SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000434:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <OS_sched+0x90>)
 8000436:	685b      	ldr	r3, [r3, #4]
 8000438:	4a0b      	ldr	r2, [pc, #44]	; (8000468 <OS_sched+0x90>)
 800043a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800043e:	6053      	str	r3, [r2, #4]
        __asm volatile("dsb");
 8000440:	f3bf 8f4f 	dsb	sy
     * DSB - whenever a memory access needs to have completed before program execution progresses.
     * ISB - whenever instruction fetches need to explicitly take place after a certain point in the program,
     * for example after memory map updates or after writing code to be executed.
     * (In practice, this means "throw away any prefetched instructions at this point".)
     * */
}
 8000444:	bf00      	nop
 8000446:	3708      	adds	r7, #8
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	20000228 	.word	0x20000228
 8000450:	20000235 	.word	0x20000235
 8000454:	20000200 	.word	0x20000200
 8000458:	200001d0 	.word	0x200001d0
 800045c:	080010b4 	.word	0x080010b4
 8000460:	200001c8 	.word	0x200001c8
 8000464:	200001cc 	.word	0x200001cc
 8000468:	e000ed00 	.word	0xe000ed00

0800046c <OS_run>:

void OS_run(void) {
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
    /* callback to configure and start interrupts */
    OS_onStartup();
 8000470:	f000 fa8e 	bl	8000990 <OS_onStartup>
  __ASM volatile ("cpsid i" : : : "memory");
 8000474:	b672      	cpsid	i
}
 8000476:	bf00      	nop

    __disable_irq();
    OS_sched();
 8000478:	f7ff ffae 	bl	80003d8 <OS_sched>
  __ASM volatile ("cpsie i" : : : "memory");
 800047c:	b662      	cpsie	i
}
 800047e:	bf00      	nop
    __enable_irq();

    /* the following code should never execute */
    Q_ERROR();
 8000480:	219c      	movs	r1, #156	; 0x9c
 8000482:	4802      	ldr	r0, [pc, #8]	; (800048c <OS_run+0x20>)
 8000484:	f000 faa3 	bl	80009ce <Q_onAssert>
}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}
 800048c:	080010b4 	.word	0x080010b4

08000490 <OS_tick>:

void OS_tick(void) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b086      	sub	sp, #24
 8000494:	af00      	add	r7, sp, #0

    uint32_t workingSet = OS_delayedSet;
 8000496:	4b41      	ldr	r3, [pc, #260]	; (800059c <OS_tick+0x10c>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	617b      	str	r3, [r7, #20]
    while (workingSet != 0U) {
 800049c:	e035      	b.n	800050a <OS_tick+0x7a>
        OSThread *t = OS_tasks[LOG2(workingSet)];
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	fab3 f383 	clz	r3, r3
 80004a4:	f1c3 0320 	rsb	r3, r3, #32
 80004a8:	4a3d      	ldr	r2, [pc, #244]	; (80005a0 <OS_tick+0x110>)
 80004aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ae:	607b      	str	r3, [r7, #4]
        uint32_t bit;
        Q_ASSERT((t != (OSThread *)0) && (t->timeout != 0U));
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d003      	beq.n	80004be <OS_tick+0x2e>
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d103      	bne.n	80004c6 <OS_tick+0x36>
 80004be:	21a5      	movs	r1, #165	; 0xa5
 80004c0:	4838      	ldr	r0, [pc, #224]	; (80005a4 <OS_tick+0x114>)
 80004c2:	f000 fa84 	bl	80009ce <Q_onAssert>

        bit = (1U << (t->prio - 1U));
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	7a1b      	ldrb	r3, [r3, #8]
 80004ca:	3b01      	subs	r3, #1
 80004cc:	2201      	movs	r2, #1
 80004ce:	fa02 f303 	lsl.w	r3, r2, r3
 80004d2:	603b      	str	r3, [r7, #0]
        --t->timeout;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	1e5a      	subs	r2, r3, #1
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	605a      	str	r2, [r3, #4]
        if (t->timeout == 0U) {
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d10c      	bne.n	8000500 <OS_tick+0x70>
            OS_readySet   |= bit;  /* insert to set */
 80004e6:	4b30      	ldr	r3, [pc, #192]	; (80005a8 <OS_tick+0x118>)
 80004e8:	681a      	ldr	r2, [r3, #0]
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	4313      	orrs	r3, r2
 80004ee:	4a2e      	ldr	r2, [pc, #184]	; (80005a8 <OS_tick+0x118>)
 80004f0:	6013      	str	r3, [r2, #0]
            OS_delayedSet &= ~bit; /* remove from set */
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	43da      	mvns	r2, r3
 80004f6:	4b29      	ldr	r3, [pc, #164]	; (800059c <OS_tick+0x10c>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4013      	ands	r3, r2
 80004fc:	4a27      	ldr	r2, [pc, #156]	; (800059c <OS_tick+0x10c>)
 80004fe:	6013      	str	r3, [r2, #0]
        }
        workingSet &= ~bit; /* remove from working set */
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	43db      	mvns	r3, r3
 8000504:	697a      	ldr	r2, [r7, #20]
 8000506:	4013      	ands	r3, r2
 8000508:	617b      	str	r3, [r7, #20]
    while (workingSet != 0U) {
 800050a:	697b      	ldr	r3, [r7, #20]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d1c6      	bne.n	800049e <OS_tick+0xe>
    }

    /* Update the dinamics parameters os periodics tasks */
    for (int i = 1; i <= number_periodic_tasks; i++){
 8000510:	2301      	movs	r3, #1
 8000512:	613b      	str	r3, [r7, #16]
 8000514:	e036      	b.n	8000584 <OS_tick+0xf4>
        OSThread *t = OS_tasks[i];
 8000516:	4a22      	ldr	r2, [pc, #136]	; (80005a0 <OS_tick+0x110>)
 8000518:	693b      	ldr	r3, [r7, #16]
 800051a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800051e:	60fb      	str	r3, [r7, #12]

        t->task_parameters->deadline_dinamic--;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	685a      	ldr	r2, [r3, #4]
 8000526:	3a01      	subs	r2, #1
 8000528:	605a      	str	r2, [r3, #4]
        t->task_parameters->period_dinamic--;
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	68da      	ldr	r2, [r3, #12]
 8000530:	3a01      	subs	r2, #1
 8000532:	60da      	str	r2, [r3, #12]

        if (t->task_parameters->period_dinamic == 0){
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	68db      	ldr	r3, [r3, #12]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d11f      	bne.n	800057e <OS_tick+0xee>
            uint32_t bit = (1U << (t->prio - 1U));
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	7a1b      	ldrb	r3, [r3, #8]
 8000542:	3b01      	subs	r3, #1
 8000544:	2201      	movs	r2, #1
 8000546:	fa02 f303 	lsl.w	r3, r2, r3
 800054a:	60bb      	str	r3, [r7, #8]

            OS_readySet   |= bit;  /* insert to set */
 800054c:	4b16      	ldr	r3, [pc, #88]	; (80005a8 <OS_tick+0x118>)
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	4313      	orrs	r3, r2
 8000554:	4a14      	ldr	r2, [pc, #80]	; (80005a8 <OS_tick+0x118>)
 8000556:	6013      	str	r3, [r2, #0]
            OS_waiting_next_periodSet &= ~bit; /* remove from set */
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	43da      	mvns	r2, r3
 800055c:	4b13      	ldr	r3, [pc, #76]	; (80005ac <OS_tick+0x11c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4013      	ands	r3, r2
 8000562:	4a12      	ldr	r2, [pc, #72]	; (80005ac <OS_tick+0x11c>)
 8000564:	6013      	str	r3, [r2, #0]

            t->task_parameters->deadline_dinamic = t->task_parameters->deadline_absolute;
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	68da      	ldr	r2, [r3, #12]
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	6812      	ldr	r2, [r2, #0]
 8000570:	605a      	str	r2, [r3, #4]
            t->task_parameters->period_dinamic = t->task_parameters->period_absolute;
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	68da      	ldr	r2, [r3, #12]
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	68db      	ldr	r3, [r3, #12]
 800057a:	6892      	ldr	r2, [r2, #8]
 800057c:	60da      	str	r2, [r3, #12]
    for (int i = 1; i <= number_periodic_tasks; i++){
 800057e:	693b      	ldr	r3, [r7, #16]
 8000580:	3301      	adds	r3, #1
 8000582:	613b      	str	r3, [r7, #16]
 8000584:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <OS_tick+0x120>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	461a      	mov	r2, r3
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	4293      	cmp	r3, r2
 800058e:	ddc2      	ble.n	8000516 <OS_tick+0x86>
        }
    }
}
 8000590:	bf00      	nop
 8000592:	bf00      	nop
 8000594:	3718      	adds	r7, #24
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	2000022c 	.word	0x2000022c
 80005a0:	200001d0 	.word	0x200001d0
 80005a4:	080010b4 	.word	0x080010b4
 80005a8:	20000228 	.word	0x20000228
 80005ac:	20000230 	.word	0x20000230
 80005b0:	20000234 	.word	0x20000234

080005b4 <OSPeriodic_task_start>:
}

void OSPeriodic_task_start(
    OSThread *me,
    OSThreadHandler threadHandler,
    void *stkSto, uint32_t stkSize) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
 80005c0:	603b      	str	r3, [r7, #0]

    /* round down the stack top to the 8-byte boundary
    * NOTE: ARM Cortex-M stack grows down from hi -> low memory
    */
    uint32_t *sp = (uint32_t *)((((uint32_t)stkSto + stkSize) / 8) * 8);
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	f023 0307 	bic.w	r3, r3, #7
 80005cc:	61fb      	str	r3, [r7, #28]
    uint32_t *stk_limit;

    /* priority must be in range of periodic tasks in array
    * and the priority level must be unused
    */
    Q_REQUIRE((number_periodic_tasks+1 < Q_DIM(OS_tasks)-1)
 80005ce:	4b95      	ldr	r3, [pc, #596]	; (8000824 <OSPeriodic_task_start+0x270>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	3301      	adds	r3, #1
 80005d4:	2b0a      	cmp	r3, #10
 80005d6:	d807      	bhi.n	80005e8 <OSPeriodic_task_start+0x34>
 80005d8:	4b92      	ldr	r3, [pc, #584]	; (8000824 <OSPeriodic_task_start+0x270>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	3301      	adds	r3, #1
 80005de:	4a92      	ldr	r2, [pc, #584]	; (8000828 <OSPeriodic_task_start+0x274>)
 80005e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d004      	beq.n	80005f2 <OSPeriodic_task_start+0x3e>
 80005e8:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80005ec:	488f      	ldr	r0, [pc, #572]	; (800082c <OSPeriodic_task_start+0x278>)
 80005ee:	f000 f9ee 	bl	80009ce <Q_onAssert>
              && (OS_tasks[number_periodic_tasks+1] == (OSThread *)0));

    if (threadHandler != &main_idleThread)
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	4a8e      	ldr	r2, [pc, #568]	; (8000830 <OSPeriodic_task_start+0x27c>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d005      	beq.n	8000606 <OSPeriodic_task_start+0x52>
        number_periodic_tasks++;
 80005fa:	4b8a      	ldr	r3, [pc, #552]	; (8000824 <OSPeriodic_task_start+0x270>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	3301      	adds	r3, #1
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b88      	ldr	r3, [pc, #544]	; (8000824 <OSPeriodic_task_start+0x270>)
 8000604:	701a      	strb	r2, [r3, #0]

    *(--sp) = (1U << 24);  /* xPSR */
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	3b04      	subs	r3, #4
 800060a:	61fb      	str	r3, [r7, #28]
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000612:	601a      	str	r2, [r3, #0]
    *(--sp) = (uint32_t)threadHandler; /* PC */
 8000614:	69fb      	ldr	r3, [r7, #28]
 8000616:	3b04      	subs	r3, #4
 8000618:	61fb      	str	r3, [r7, #28]
 800061a:	68ba      	ldr	r2, [r7, #8]
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x0000000EU; /* LR  */
 8000620:	69fb      	ldr	r3, [r7, #28]
 8000622:	3b04      	subs	r3, #4
 8000624:	61fb      	str	r3, [r7, #28]
 8000626:	69fb      	ldr	r3, [r7, #28]
 8000628:	220e      	movs	r2, #14
 800062a:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x0000000CU; /* R12 */
 800062c:	69fb      	ldr	r3, [r7, #28]
 800062e:	3b04      	subs	r3, #4
 8000630:	61fb      	str	r3, [r7, #28]
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	220c      	movs	r2, #12
 8000636:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000003U; /* R3  */
 8000638:	69fb      	ldr	r3, [r7, #28]
 800063a:	3b04      	subs	r3, #4
 800063c:	61fb      	str	r3, [r7, #28]
 800063e:	69fb      	ldr	r3, [r7, #28]
 8000640:	2203      	movs	r2, #3
 8000642:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000002U; /* R2  */
 8000644:	69fb      	ldr	r3, [r7, #28]
 8000646:	3b04      	subs	r3, #4
 8000648:	61fb      	str	r3, [r7, #28]
 800064a:	69fb      	ldr	r3, [r7, #28]
 800064c:	2202      	movs	r2, #2
 800064e:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000001U; /* R1  */
 8000650:	69fb      	ldr	r3, [r7, #28]
 8000652:	3b04      	subs	r3, #4
 8000654:	61fb      	str	r3, [r7, #28]
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	2201      	movs	r2, #1
 800065a:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000000U; /* R0  */
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	3b04      	subs	r3, #4
 8000660:	61fb      	str	r3, [r7, #28]
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
    /* additionally, fake registers R4-R11 */
    *(--sp) = 0x0000000BU; /* R11 */
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	3b04      	subs	r3, #4
 800066c:	61fb      	str	r3, [r7, #28]
 800066e:	69fb      	ldr	r3, [r7, #28]
 8000670:	220b      	movs	r2, #11
 8000672:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x0000000AU; /* R10 */
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	3b04      	subs	r3, #4
 8000678:	61fb      	str	r3, [r7, #28]
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	220a      	movs	r2, #10
 800067e:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000009U; /* R9 */
 8000680:	69fb      	ldr	r3, [r7, #28]
 8000682:	3b04      	subs	r3, #4
 8000684:	61fb      	str	r3, [r7, #28]
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	2209      	movs	r2, #9
 800068a:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000008U; /* R8 */
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	3b04      	subs	r3, #4
 8000690:	61fb      	str	r3, [r7, #28]
 8000692:	69fb      	ldr	r3, [r7, #28]
 8000694:	2208      	movs	r2, #8
 8000696:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000007U; /* R7 */
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	3b04      	subs	r3, #4
 800069c:	61fb      	str	r3, [r7, #28]
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	2207      	movs	r2, #7
 80006a2:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000006U; /* R6 */
 80006a4:	69fb      	ldr	r3, [r7, #28]
 80006a6:	3b04      	subs	r3, #4
 80006a8:	61fb      	str	r3, [r7, #28]
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	2206      	movs	r2, #6
 80006ae:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000005U; /* R5 */
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	3b04      	subs	r3, #4
 80006b4:	61fb      	str	r3, [r7, #28]
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	2205      	movs	r2, #5
 80006ba:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000004U; /* R4 */
 80006bc:	69fb      	ldr	r3, [r7, #28]
 80006be:	3b04      	subs	r3, #4
 80006c0:	61fb      	str	r3, [r7, #28]
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	2204      	movs	r2, #4
 80006c6:	601a      	str	r2, [r3, #0]

    /* save the top of the stack in the thread's attibute */
    me->sp = sp;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	69fa      	ldr	r2, [r7, #28]
 80006cc:	601a      	str	r2, [r3, #0]

    /* round up the bottom of the stack to the 8-byte boundary */
    stk_limit = (uint32_t *)(((((uint32_t)stkSto - 1U) / 8) + 1U) * 8);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	3b01      	subs	r3, #1
 80006d2:	08db      	lsrs	r3, r3, #3
 80006d4:	3301      	adds	r3, #1
 80006d6:	00db      	lsls	r3, r3, #3
 80006d8:	617b      	str	r3, [r7, #20]

    /* pre-fill the unused part of the stack with 0xDEADBEEF */
    for (sp = sp - 1U; sp >= stk_limit; --sp) {
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	3b04      	subs	r3, #4
 80006de:	61fb      	str	r3, [r7, #28]
 80006e0:	e005      	b.n	80006ee <OSPeriodic_task_start+0x13a>
        *sp = 0xDEADBEEFU;
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	4a53      	ldr	r2, [pc, #332]	; (8000834 <OSPeriodic_task_start+0x280>)
 80006e6:	601a      	str	r2, [r3, #0]
    for (sp = sp - 1U; sp >= stk_limit; --sp) {
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	3b04      	subs	r3, #4
 80006ec:	61fb      	str	r3, [r7, #28]
 80006ee:	69fa      	ldr	r2, [r7, #28]
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d2f5      	bcs.n	80006e2 <OSPeriodic_task_start+0x12e>
    }

    // If is the Idle Thread
    if (number_periodic_tasks == 0){
 80006f6:	4b4b      	ldr	r3, [pc, #300]	; (8000824 <OSPeriodic_task_start+0x270>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d10b      	bne.n	8000716 <OSPeriodic_task_start+0x162>
        OS_tasks[0] = me;
 80006fe:	4a4a      	ldr	r2, [pc, #296]	; (8000828 <OSPeriodic_task_start+0x274>)
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	6013      	str	r3, [r2, #0]
        OS_tasks[0]->prio = 0;
 8000704:	4b48      	ldr	r3, [pc, #288]	; (8000828 <OSPeriodic_task_start+0x274>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2200      	movs	r2, #0
 800070a:	721a      	strb	r2, [r3, #8]
        OS_tasks[0]->critical_regions_historic[0] = 0;
 800070c:	4b46      	ldr	r3, [pc, #280]	; (8000828 <OSPeriodic_task_start+0x274>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2200      	movs	r2, #0
 8000712:	741a      	strb	r2, [r3, #16]
 8000714:	e074      	b.n	8000800 <OSPeriodic_task_start+0x24c>

    } else {
        for (uint8_t i=1; i <= number_periodic_tasks; i++){
 8000716:	2301      	movs	r3, #1
 8000718:	76fb      	strb	r3, [r7, #27]
 800071a:	e06c      	b.n	80007f6 <OSPeriodic_task_start+0x242>
            // Se deadline da task_i é menor, a task_me tem prioridade maior  ->  me vai ser salvo

            // If is the last loop, the task_me has the higher priority
            if (i == number_periodic_tasks){
 800071c:	4b41      	ldr	r3, [pc, #260]	; (8000824 <OSPeriodic_task_start+0x270>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	7efa      	ldrb	r2, [r7, #27]
 8000722:	429a      	cmp	r2, r3
 8000724:	d111      	bne.n	800074a <OSPeriodic_task_start+0x196>
                OS_tasks[i] = me;
 8000726:	7efb      	ldrb	r3, [r7, #27]
 8000728:	493f      	ldr	r1, [pc, #252]	; (8000828 <OSPeriodic_task_start+0x274>)
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                OS_tasks[i]->prio = i;
 8000730:	7efb      	ldrb	r3, [r7, #27]
 8000732:	4a3d      	ldr	r2, [pc, #244]	; (8000828 <OSPeriodic_task_start+0x274>)
 8000734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000738:	7efa      	ldrb	r2, [r7, #27]
 800073a:	721a      	strb	r2, [r3, #8]
                OS_tasks[i]->critical_regions_historic[0] = i;
 800073c:	7efb      	ldrb	r3, [r7, #27]
 800073e:	4a3a      	ldr	r2, [pc, #232]	; (8000828 <OSPeriodic_task_start+0x274>)
 8000740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000744:	7efa      	ldrb	r2, [r7, #27]
 8000746:	741a      	strb	r2, [r3, #16]
 8000748:	e052      	b.n	80007f0 <OSPeriodic_task_start+0x23c>

            } else if (OS_tasks[i]->task_parameters->deadline_absolute < me->task_parameters->deadline_absolute ||
 800074a:	7efb      	ldrb	r3, [r7, #27]
 800074c:	4a36      	ldr	r2, [pc, #216]	; (8000828 <OSPeriodic_task_start+0x274>)
 800074e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	68db      	ldr	r3, [r3, #12]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	429a      	cmp	r2, r3
 800075e:	d315      	bcc.n	800078c <OSPeriodic_task_start+0x1d8>
            /* If the task_i has a lower deadline, it has a higher priority or
                its has a lower period with the same deadline than we need to 
                rearrange the tasks with the correct priority
            */
                    (OS_tasks[i]->task_parameters->deadline_absolute == me->task_parameters->deadline_absolute &&
 8000760:	7efb      	ldrb	r3, [r7, #27]
 8000762:	4a31      	ldr	r2, [pc, #196]	; (8000828 <OSPeriodic_task_start+0x274>)
 8000764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000768:	68db      	ldr	r3, [r3, #12]
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	681b      	ldr	r3, [r3, #0]
            } else if (OS_tasks[i]->task_parameters->deadline_absolute < me->task_parameters->deadline_absolute ||
 8000772:	429a      	cmp	r2, r3
 8000774:	d13c      	bne.n	80007f0 <OSPeriodic_task_start+0x23c>
                        OS_tasks[i]->task_parameters->period_absolute < me->task_parameters->period_absolute)){
 8000776:	7efb      	ldrb	r3, [r7, #27]
 8000778:	4a2b      	ldr	r2, [pc, #172]	; (8000828 <OSPeriodic_task_start+0x274>)
 800077a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	689a      	ldr	r2, [r3, #8]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	68db      	ldr	r3, [r3, #12]
 8000786:	689b      	ldr	r3, [r3, #8]
                    (OS_tasks[i]->task_parameters->deadline_absolute == me->task_parameters->deadline_absolute &&
 8000788:	429a      	cmp	r2, r3
 800078a:	d231      	bcs.n	80007f0 <OSPeriodic_task_start+0x23c>

                for (uint8_t j = number_periodic_tasks; j > i; j--){
 800078c:	4b25      	ldr	r3, [pc, #148]	; (8000824 <OSPeriodic_task_start+0x270>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	76bb      	strb	r3, [r7, #26]
 8000792:	e017      	b.n	80007c4 <OSPeriodic_task_start+0x210>
                    OS_tasks[j] = OS_tasks[j-1];
 8000794:	7ebb      	ldrb	r3, [r7, #26]
 8000796:	1e5a      	subs	r2, r3, #1
 8000798:	7ebb      	ldrb	r3, [r7, #26]
 800079a:	4923      	ldr	r1, [pc, #140]	; (8000828 <OSPeriodic_task_start+0x274>)
 800079c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80007a0:	4921      	ldr	r1, [pc, #132]	; (8000828 <OSPeriodic_task_start+0x274>)
 80007a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    OS_tasks[j]->prio = j;
 80007a6:	7ebb      	ldrb	r3, [r7, #26]
 80007a8:	4a1f      	ldr	r2, [pc, #124]	; (8000828 <OSPeriodic_task_start+0x274>)
 80007aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ae:	7eba      	ldrb	r2, [r7, #26]
 80007b0:	721a      	strb	r2, [r3, #8]
                    OS_tasks[j]->critical_regions_historic[0] = j;
 80007b2:	7ebb      	ldrb	r3, [r7, #26]
 80007b4:	4a1c      	ldr	r2, [pc, #112]	; (8000828 <OSPeriodic_task_start+0x274>)
 80007b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ba:	7eba      	ldrb	r2, [r7, #26]
 80007bc:	741a      	strb	r2, [r3, #16]
                for (uint8_t j = number_periodic_tasks; j > i; j--){
 80007be:	7ebb      	ldrb	r3, [r7, #26]
 80007c0:	3b01      	subs	r3, #1
 80007c2:	76bb      	strb	r3, [r7, #26]
 80007c4:	7eba      	ldrb	r2, [r7, #26]
 80007c6:	7efb      	ldrb	r3, [r7, #27]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d8e3      	bhi.n	8000794 <OSPeriodic_task_start+0x1e0>
                }
                OS_tasks[i] = me;
 80007cc:	7efb      	ldrb	r3, [r7, #27]
 80007ce:	4916      	ldr	r1, [pc, #88]	; (8000828 <OSPeriodic_task_start+0x274>)
 80007d0:	68fa      	ldr	r2, [r7, #12]
 80007d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                OS_tasks[i]->prio = i;
 80007d6:	7efb      	ldrb	r3, [r7, #27]
 80007d8:	4a13      	ldr	r2, [pc, #76]	; (8000828 <OSPeriodic_task_start+0x274>)
 80007da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007de:	7efa      	ldrb	r2, [r7, #27]
 80007e0:	721a      	strb	r2, [r3, #8]
                OS_tasks[i]->critical_regions_historic[0] = i;
 80007e2:	7efb      	ldrb	r3, [r7, #27]
 80007e4:	4a10      	ldr	r2, [pc, #64]	; (8000828 <OSPeriodic_task_start+0x274>)
 80007e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ea:	7efa      	ldrb	r2, [r7, #27]
 80007ec:	741a      	strb	r2, [r3, #16]
                break;
 80007ee:	e007      	b.n	8000800 <OSPeriodic_task_start+0x24c>
        for (uint8_t i=1; i <= number_periodic_tasks; i++){
 80007f0:	7efb      	ldrb	r3, [r7, #27]
 80007f2:	3301      	adds	r3, #1
 80007f4:	76fb      	strb	r3, [r7, #27]
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <OSPeriodic_task_start+0x270>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	7efa      	ldrb	r2, [r7, #27]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d98d      	bls.n	800071c <OSPeriodic_task_start+0x168>
        }
    }

    /* register the thread with the OS */
    /* make the thread ready to run */
    if (me->prio > 0U) {
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	7a1b      	ldrb	r3, [r3, #8]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d009      	beq.n	800081c <OSPeriodic_task_start+0x268>
        OS_readySet |= (1U << (me->prio - 1U));
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	7a1b      	ldrb	r3, [r3, #8]
 800080c:	3b01      	subs	r3, #1
 800080e:	2201      	movs	r2, #1
 8000810:	409a      	lsls	r2, r3
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <OSPeriodic_task_start+0x284>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4313      	orrs	r3, r2
 8000818:	4a07      	ldr	r2, [pc, #28]	; (8000838 <OSPeriodic_task_start+0x284>)
 800081a:	6013      	str	r3, [r2, #0]
    }
}
 800081c:	bf00      	nop
 800081e:	3720      	adds	r7, #32
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000234 	.word	0x20000234
 8000828:	200001d0 	.word	0x200001d0
 800082c:	080010b4 	.word	0x080010b4
 8000830:	08000341 	.word	0x08000341
 8000834:	deadbeef 	.word	0xdeadbeef
 8000838:	20000228 	.word	0x20000228

0800083c <PendSV_Handler>:

__attribute__ ((naked, optimize("-fno-stack-protector")))
void PendSV_Handler(void) {
__asm volatile (
 800083c:	b672      	cpsid	i
 800083e:	490b      	ldr	r1, [pc, #44]	; (800086c <PendSV_restore+0x1c>)
 8000840:	6809      	ldr	r1, [r1, #0]
 8000842:	b129      	cbz	r1, 8000850 <PendSV_restore>
 8000844:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000848:	4908      	ldr	r1, [pc, #32]	; (800086c <PendSV_restore+0x1c>)
 800084a:	6809      	ldr	r1, [r1, #0]
 800084c:	f8c1 d000 	str.w	sp, [r1]

08000850 <PendSV_restore>:
 8000850:	4907      	ldr	r1, [pc, #28]	; (8000870 <PendSV_restore+0x20>)
 8000852:	6809      	ldr	r1, [r1, #0]
 8000854:	f8d1 d000 	ldr.w	sp, [r1]
 8000858:	4905      	ldr	r1, [pc, #20]	; (8000870 <PendSV_restore+0x20>)
 800085a:	6809      	ldr	r1, [r1, #0]
 800085c:	4a03      	ldr	r2, [pc, #12]	; (800086c <PendSV_restore+0x1c>)
 800085e:	6011      	str	r1, [r2, #0]
 8000860:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000864:	b662      	cpsie	i
 8000866:	4770      	bx	lr
    "  CPSIE         I                 \n"

    /* return to the next thread */
    "  BX            lr                \n"
    );
}
 8000868:	bf00      	nop
 800086a:	0000      	.short	0x0000
 800086c:	200001c8 	.word	0x200001c8
 8000870:	200001cc 	.word	0x200001cc

08000874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000884:	2b00      	cmp	r3, #0
 8000886:	db0a      	blt.n	800089e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	b2da      	uxtb	r2, r3
 800088c:	490c      	ldr	r1, [pc, #48]	; (80008c0 <__NVIC_SetPriority+0x4c>)
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	0112      	lsls	r2, r2, #4
 8000894:	b2d2      	uxtb	r2, r2
 8000896:	440b      	add	r3, r1
 8000898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800089c:	e00a      	b.n	80008b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4908      	ldr	r1, [pc, #32]	; (80008c4 <__NVIC_SetPriority+0x50>)
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	f003 030f 	and.w	r3, r3, #15
 80008aa:	3b04      	subs	r3, #4
 80008ac:	0112      	lsls	r2, r2, #4
 80008ae:	b2d2      	uxtb	r2, r2
 80008b0:	440b      	add	r3, r1
 80008b2:	761a      	strb	r2, [r3, #24]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	e000e100 	.word	0xe000e100
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80008cc:	f3bf 8f4f 	dsb	sy
}
 80008d0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <__NVIC_SystemReset+0x24>)
 80008d4:	68db      	ldr	r3, [r3, #12]
 80008d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80008da:	4904      	ldr	r1, [pc, #16]	; (80008ec <__NVIC_SystemReset+0x24>)
 80008dc:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <__NVIC_SystemReset+0x28>)
 80008de:	4313      	orrs	r3, r2
 80008e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80008e2:	f3bf 8f4f 	dsb	sy
}
 80008e6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <__NVIC_SystemReset+0x20>
 80008ec:	e000ed00 	.word	0xe000ed00
 80008f0:	05fa0004 	.word	0x05fa0004

080008f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3b01      	subs	r3, #1
 8000900:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000904:	d301      	bcc.n	800090a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000906:	2301      	movs	r3, #1
 8000908:	e00f      	b.n	800092a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <SysTick_Config+0x40>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3b01      	subs	r3, #1
 8000910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000912:	210f      	movs	r1, #15
 8000914:	f04f 30ff 	mov.w	r0, #4294967295
 8000918:	f7ff ffac 	bl	8000874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800091c:	4b05      	ldr	r3, [pc, #20]	; (8000934 <SysTick_Config+0x40>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000922:	4b04      	ldr	r3, [pc, #16]	; (8000934 <SysTick_Config+0x40>)
 8000924:	2207      	movs	r2, #7
 8000926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	e000e010 	.word	0xe000e010

08000938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800093c:	e7fe      	b.n	800093c <NMI_Handler+0x4>

0800093e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <HardFault_Handler+0x4>

08000944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <MemManage_Handler+0x4>

0800094a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <BusFault_Handler+0x4>

08000950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <UsageFault_Handler+0x4>

08000956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000976:	f000 f8f5 	bl	8000b64 <HAL_IncTick>
  __ASM volatile ("cpsid i" : : : "memory");
 800097a:	b672      	cpsid	i
}
 800097c:	bf00      	nop
  /* USER CODE BEGIN SysTick_IRQn 1 */
  __disable_irq();
  OS_tick();
 800097e:	f7ff fd87 	bl	8000490 <OS_tick>
  OS_sched();
 8000982:	f7ff fd29 	bl	80003d8 <OS_sched>
  __ASM volatile ("cpsie i" : : : "memory");
 8000986:	b662      	cpsie	i
}
 8000988:	bf00      	nop
  __enable_irq();
  /* USER CODE END SysTick_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <OS_onStartup>:

void OS_onStartup(void) {
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
    SystemCoreClockUpdate();
 8000994:	f000 f83c 	bl	8000a10 <SystemCoreClockUpdate>
    SysTick_Config(SystemCoreClock / TICKS_PER_SEC);
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <OS_onStartup+0x28>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a07      	ldr	r2, [pc, #28]	; (80009bc <OS_onStartup+0x2c>)
 800099e:	fba2 2303 	umull	r2, r3, r2, r3
 80009a2:	095b      	lsrs	r3, r3, #5
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ffa5 	bl	80008f4 <SysTick_Config>

    /* set the SysTick interrupt priority (highest) */
    NVIC_SetPriority(SysTick_IRQn, 0U);
 80009aa:	2100      	movs	r1, #0
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f7ff ff60 	bl	8000874 <__NVIC_SetPriority>
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000000 	.word	0x20000000
 80009bc:	51eb851f 	.word	0x51eb851f

080009c0 <OS_onIdle>:

void OS_onIdle(void) {
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
#ifdef NDBEBUG
    __WFI(); /* stop the CPU and Wait for Interrupt */
#endif
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <Q_onAssert>:

void Q_onAssert(char const *module, int loc) {
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b082      	sub	sp, #8
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
 80009d6:	6039      	str	r1, [r7, #0]
    /* TBD: damage control */
    (void)module; /* avoid the "unused parameter" compiler warning */
    (void)loc;    /* avoid the "unused parameter" compiler warning */
    NVIC_SystemReset();
 80009d8:	f7ff ff76 	bl	80008c8 <__NVIC_SystemReset>

080009dc <EXTI0_IRQHandler>:
}


void EXTI0_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 80009e0:	2001      	movs	r0, #1
 80009e2:	f000 fb17 	bl	8001014 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <SystemInit+0x20>)
 80009f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f6:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <SystemInit+0x20>)
 80009f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b087      	sub	sp, #28
 8000a14:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
 8000a1e:	2302      	movs	r3, #2
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	2302      	movs	r3, #2
 8000a28:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000a2a:	4b34      	ldr	r3, [pc, #208]	; (8000afc <SystemCoreClockUpdate+0xec>)
 8000a2c:	689b      	ldr	r3, [r3, #8]
 8000a2e:	f003 030c 	and.w	r3, r3, #12
 8000a32:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	2b08      	cmp	r3, #8
 8000a38:	d011      	beq.n	8000a5e <SystemCoreClockUpdate+0x4e>
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	2b08      	cmp	r3, #8
 8000a3e:	d844      	bhi.n	8000aca <SystemCoreClockUpdate+0xba>
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d003      	beq.n	8000a4e <SystemCoreClockUpdate+0x3e>
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	2b04      	cmp	r3, #4
 8000a4a:	d004      	beq.n	8000a56 <SystemCoreClockUpdate+0x46>
 8000a4c:	e03d      	b.n	8000aca <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000a4e:	4b2c      	ldr	r3, [pc, #176]	; (8000b00 <SystemCoreClockUpdate+0xf0>)
 8000a50:	4a2c      	ldr	r2, [pc, #176]	; (8000b04 <SystemCoreClockUpdate+0xf4>)
 8000a52:	601a      	str	r2, [r3, #0]
      break;
 8000a54:	e03d      	b.n	8000ad2 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000a56:	4b2a      	ldr	r3, [pc, #168]	; (8000b00 <SystemCoreClockUpdate+0xf0>)
 8000a58:	4a2b      	ldr	r2, [pc, #172]	; (8000b08 <SystemCoreClockUpdate+0xf8>)
 8000a5a:	601a      	str	r2, [r3, #0]
      break;
 8000a5c:	e039      	b.n	8000ad2 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000a5e:	4b27      	ldr	r3, [pc, #156]	; (8000afc <SystemCoreClockUpdate+0xec>)
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	0d9b      	lsrs	r3, r3, #22
 8000a64:	f003 0301 	and.w	r3, r3, #1
 8000a68:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a6a:	4b24      	ldr	r3, [pc, #144]	; (8000afc <SystemCoreClockUpdate+0xec>)
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a72:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d00c      	beq.n	8000a94 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000a7a:	4a23      	ldr	r2, [pc, #140]	; (8000b08 <SystemCoreClockUpdate+0xf8>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a82:	4a1e      	ldr	r2, [pc, #120]	; (8000afc <SystemCoreClockUpdate+0xec>)
 8000a84:	6852      	ldr	r2, [r2, #4]
 8000a86:	0992      	lsrs	r2, r2, #6
 8000a88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000a8c:	fb02 f303 	mul.w	r3, r2, r3
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	e00b      	b.n	8000aac <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000a94:	4a1b      	ldr	r2, [pc, #108]	; (8000b04 <SystemCoreClockUpdate+0xf4>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9c:	4a17      	ldr	r2, [pc, #92]	; (8000afc <SystemCoreClockUpdate+0xec>)
 8000a9e:	6852      	ldr	r2, [r2, #4]
 8000aa0:	0992      	lsrs	r2, r2, #6
 8000aa2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000aa6:	fb02 f303 	mul.w	r3, r2, r3
 8000aaa:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <SystemCoreClockUpdate+0xec>)
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	0c1b      	lsrs	r3, r3, #16
 8000ab2:	f003 0303 	and.w	r3, r3, #3
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000abc:	697a      	ldr	r2, [r7, #20]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac4:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <SystemCoreClockUpdate+0xf0>)
 8000ac6:	6013      	str	r3, [r2, #0]
      break;
 8000ac8:	e003      	b.n	8000ad2 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <SystemCoreClockUpdate+0xf0>)
 8000acc:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <SystemCoreClockUpdate+0xf4>)
 8000ace:	601a      	str	r2, [r3, #0]
      break;
 8000ad0:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <SystemCoreClockUpdate+0xec>)
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	091b      	lsrs	r3, r3, #4
 8000ad8:	f003 030f 	and.w	r3, r3, #15
 8000adc:	4a0b      	ldr	r2, [pc, #44]	; (8000b0c <SystemCoreClockUpdate+0xfc>)
 8000ade:	5cd3      	ldrb	r3, [r2, r3]
 8000ae0:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <SystemCoreClockUpdate+0xf0>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8000aec:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <SystemCoreClockUpdate+0xf0>)
 8000aee:	6013      	str	r3, [r2, #0]
}
 8000af0:	bf00      	nop
 8000af2:	371c      	adds	r7, #28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	40023800 	.word	0x40023800
 8000b00:	20000000 	.word	0x20000000
 8000b04:	00f42400 	.word	0x00f42400
 8000b08:	017d7840 	.word	0x017d7840
 8000b0c:	080010c8 	.word	0x080010c8

08000b10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b14:	f7ff ff6a 	bl	80009ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b18:	480c      	ldr	r0, [pc, #48]	; (8000b4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b1a:	490d      	ldr	r1, [pc, #52]	; (8000b50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b20:	e002      	b.n	8000b28 <LoopCopyDataInit>

08000b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b26:	3304      	adds	r3, #4

08000b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b2c:	d3f9      	bcc.n	8000b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b30:	4c0a      	ldr	r4, [pc, #40]	; (8000b5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b34:	e001      	b.n	8000b3a <LoopFillZerobss>

08000b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b38:	3204      	adds	r2, #4

08000b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b3c:	d3fb      	bcc.n	8000b36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b3e:	f000 fa89 	bl	8001054 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b42:	f7ff fb95 	bl	8000270 <main>
  bx  lr    
 8000b46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b50:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000b54:	080010e0 	.word	0x080010e0
  ldr r2, =_sbss
 8000b58:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000b5c:	2000025c 	.word	0x2000025c

08000b60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b60:	e7fe      	b.n	8000b60 <ADC_IRQHandler>
	...

08000b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_IncTick+0x20>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_IncTick+0x24>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4413      	add	r3, r2
 8000b74:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <HAL_IncTick+0x24>)
 8000b76:	6013      	str	r3, [r2, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000004 	.word	0x20000004
 8000b88:	20000254 	.word	0x20000254

08000b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b90:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <HAL_GetTick+0x14>)
 8000b92:	681b      	ldr	r3, [r3, #0]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000254 	.word	0x20000254

08000ba4 <__NVIC_GetPriorityGrouping>:
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <__NVIC_GetPriorityGrouping+0x18>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	f003 0307 	and.w	r3, r3, #7
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_EnableIRQ>:
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	db0b      	blt.n	8000bea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	f003 021f 	and.w	r2, r3, #31
 8000bd8:	4907      	ldr	r1, [pc, #28]	; (8000bf8 <__NVIC_EnableIRQ+0x38>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	095b      	lsrs	r3, r3, #5
 8000be0:	2001      	movs	r0, #1
 8000be2:	fa00 f202 	lsl.w	r2, r0, r2
 8000be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000e100 	.word	0xe000e100

08000bfc <__NVIC_SetPriority>:
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	db0a      	blt.n	8000c26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	490c      	ldr	r1, [pc, #48]	; (8000c48 <__NVIC_SetPriority+0x4c>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	0112      	lsls	r2, r2, #4
 8000c1c:	b2d2      	uxtb	r2, r2
 8000c1e:	440b      	add	r3, r1
 8000c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c24:	e00a      	b.n	8000c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4908      	ldr	r1, [pc, #32]	; (8000c4c <__NVIC_SetPriority+0x50>)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	3b04      	subs	r3, #4
 8000c34:	0112      	lsls	r2, r2, #4
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	440b      	add	r3, r1
 8000c3a:	761a      	strb	r2, [r3, #24]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <NVIC_EncodePriority>:
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	; 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f1c3 0307 	rsb	r3, r3, #7
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	bf28      	it	cs
 8000c6e:	2304      	movcs	r3, #4
 8000c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3304      	adds	r3, #4
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d902      	bls.n	8000c80 <NVIC_EncodePriority+0x30>
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3b03      	subs	r3, #3
 8000c7e:	e000      	b.n	8000c82 <NVIC_EncodePriority+0x32>
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	f04f 32ff 	mov.w	r2, #4294967295
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43d9      	mvns	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	4313      	orrs	r3, r2
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3724      	adds	r7, #36	; 0x24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b086      	sub	sp, #24
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
 8000cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc8:	f7ff ff6c 	bl	8000ba4 <__NVIC_GetPriorityGrouping>
 8000ccc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	68b9      	ldr	r1, [r7, #8]
 8000cd2:	6978      	ldr	r0, [r7, #20]
 8000cd4:	f7ff ffbc 	bl	8000c50 <NVIC_EncodePriority>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cde:	4611      	mov	r1, r2
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff8b 	bl	8000bfc <__NVIC_SetPriority>
}
 8000ce6:	bf00      	nop
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff5f 	bl	8000bc0 <__NVIC_EnableIRQ>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
 8000d26:	e159      	b.n	8000fdc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d28:	2201      	movs	r2, #1
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	697a      	ldr	r2, [r7, #20]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	f040 8148 	bne.w	8000fd6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f003 0303 	and.w	r3, r3, #3
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d005      	beq.n	8000d5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d130      	bne.n	8000dc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	2203      	movs	r2, #3
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4013      	ands	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	68da      	ldr	r2, [r3, #12]
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d94:	2201      	movs	r2, #1
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4013      	ands	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	091b      	lsrs	r3, r3, #4
 8000daa:	f003 0201 	and.w	r2, r3, #1
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 0303 	and.w	r3, r3, #3
 8000dc8:	2b03      	cmp	r3, #3
 8000dca:	d017      	beq.n	8000dfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	689a      	ldr	r2, [r3, #8]
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d123      	bne.n	8000e50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	08da      	lsrs	r2, r3, #3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3208      	adds	r2, #8
 8000e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	f003 0307 	and.w	r3, r3, #7
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	220f      	movs	r2, #15
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	691a      	ldr	r2, [r3, #16]
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	08da      	lsrs	r2, r3, #3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3208      	adds	r2, #8
 8000e4a:	69b9      	ldr	r1, [r7, #24]
 8000e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 0203 	and.w	r2, r3, #3
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	f000 80a2 	beq.w	8000fd6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	4b57      	ldr	r3, [pc, #348]	; (8000ff4 <HAL_GPIO_Init+0x2e8>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	4a56      	ldr	r2, [pc, #344]	; (8000ff4 <HAL_GPIO_Init+0x2e8>)
 8000e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea2:	4b54      	ldr	r3, [pc, #336]	; (8000ff4 <HAL_GPIO_Init+0x2e8>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eae:	4a52      	ldr	r2, [pc, #328]	; (8000ff8 <HAL_GPIO_Init+0x2ec>)
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	089b      	lsrs	r3, r3, #2
 8000eb4:	3302      	adds	r3, #2
 8000eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	f003 0303 	and.w	r3, r3, #3
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	220f      	movs	r2, #15
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a49      	ldr	r2, [pc, #292]	; (8000ffc <HAL_GPIO_Init+0x2f0>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d019      	beq.n	8000f0e <HAL_GPIO_Init+0x202>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a48      	ldr	r2, [pc, #288]	; (8001000 <HAL_GPIO_Init+0x2f4>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d013      	beq.n	8000f0a <HAL_GPIO_Init+0x1fe>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a47      	ldr	r2, [pc, #284]	; (8001004 <HAL_GPIO_Init+0x2f8>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d00d      	beq.n	8000f06 <HAL_GPIO_Init+0x1fa>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a46      	ldr	r2, [pc, #280]	; (8001008 <HAL_GPIO_Init+0x2fc>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d007      	beq.n	8000f02 <HAL_GPIO_Init+0x1f6>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a45      	ldr	r2, [pc, #276]	; (800100c <HAL_GPIO_Init+0x300>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d101      	bne.n	8000efe <HAL_GPIO_Init+0x1f2>
 8000efa:	2304      	movs	r3, #4
 8000efc:	e008      	b.n	8000f10 <HAL_GPIO_Init+0x204>
 8000efe:	2307      	movs	r3, #7
 8000f00:	e006      	b.n	8000f10 <HAL_GPIO_Init+0x204>
 8000f02:	2303      	movs	r3, #3
 8000f04:	e004      	b.n	8000f10 <HAL_GPIO_Init+0x204>
 8000f06:	2302      	movs	r3, #2
 8000f08:	e002      	b.n	8000f10 <HAL_GPIO_Init+0x204>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e000      	b.n	8000f10 <HAL_GPIO_Init+0x204>
 8000f0e:	2300      	movs	r3, #0
 8000f10:	69fa      	ldr	r2, [r7, #28]
 8000f12:	f002 0203 	and.w	r2, r2, #3
 8000f16:	0092      	lsls	r2, r2, #2
 8000f18:	4093      	lsls	r3, r2
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f20:	4935      	ldr	r1, [pc, #212]	; (8000ff8 <HAL_GPIO_Init+0x2ec>)
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	089b      	lsrs	r3, r3, #2
 8000f26:	3302      	adds	r3, #2
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f2e:	4b38      	ldr	r3, [pc, #224]	; (8001010 <HAL_GPIO_Init+0x304>)
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f52:	4a2f      	ldr	r2, [pc, #188]	; (8001010 <HAL_GPIO_Init+0x304>)
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f58:	4b2d      	ldr	r3, [pc, #180]	; (8001010 <HAL_GPIO_Init+0x304>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f7c:	4a24      	ldr	r2, [pc, #144]	; (8001010 <HAL_GPIO_Init+0x304>)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f82:	4b23      	ldr	r3, [pc, #140]	; (8001010 <HAL_GPIO_Init+0x304>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fa6:	4a1a      	ldr	r2, [pc, #104]	; (8001010 <HAL_GPIO_Init+0x304>)
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fac:	4b18      	ldr	r3, [pc, #96]	; (8001010 <HAL_GPIO_Init+0x304>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fd0:	4a0f      	ldr	r2, [pc, #60]	; (8001010 <HAL_GPIO_Init+0x304>)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	61fb      	str	r3, [r7, #28]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	2b0f      	cmp	r3, #15
 8000fe0:	f67f aea2 	bls.w	8000d28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	3724      	adds	r7, #36	; 0x24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40013800 	.word	0x40013800
 8000ffc:	40020000 	.word	0x40020000
 8001000:	40020400 	.word	0x40020400
 8001004:	40020800 	.word	0x40020800
 8001008:	40020c00 	.word	0x40020c00
 800100c:	40021000 	.word	0x40021000
 8001010:	40013c00 	.word	0x40013c00

08001014 <HAL_GPIO_EXTI_IRQHandler>:
  */

uint32_t ky_hal_gpio=0;

void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	80fb      	strh	r3, [r7, #6]

  ky_hal_gpio++;
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_GPIO_EXTI_IRQHandler+0x38>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	3301      	adds	r3, #1
 8001024:	4a09      	ldr	r2, [pc, #36]	; (800104c <HAL_GPIO_EXTI_IRQHandler+0x38>)
 8001026:	6013      	str	r3, [r2, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <HAL_GPIO_EXTI_IRQHandler+0x3c>)
 800102a:	695a      	ldr	r2, [r3, #20]
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	4013      	ands	r3, r2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d006      	beq.n	8001042 <HAL_GPIO_EXTI_IRQHandler+0x2e>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001034:	4a06      	ldr	r2, [pc, #24]	; (8001050 <HAL_GPIO_EXTI_IRQHandler+0x3c>)
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800103a:	88fb      	ldrh	r3, [r7, #6]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff f95d 	bl	80002fc <HAL_GPIO_EXTI_Callback>
  }
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000258 	.word	0x20000258
 8001050:	40013c00 	.word	0x40013c00

08001054 <__libc_init_array>:
 8001054:	b570      	push	{r4, r5, r6, lr}
 8001056:	4d0d      	ldr	r5, [pc, #52]	; (800108c <__libc_init_array+0x38>)
 8001058:	4c0d      	ldr	r4, [pc, #52]	; (8001090 <__libc_init_array+0x3c>)
 800105a:	1b64      	subs	r4, r4, r5
 800105c:	10a4      	asrs	r4, r4, #2
 800105e:	2600      	movs	r6, #0
 8001060:	42a6      	cmp	r6, r4
 8001062:	d109      	bne.n	8001078 <__libc_init_array+0x24>
 8001064:	4d0b      	ldr	r5, [pc, #44]	; (8001094 <__libc_init_array+0x40>)
 8001066:	4c0c      	ldr	r4, [pc, #48]	; (8001098 <__libc_init_array+0x44>)
 8001068:	f000 f818 	bl	800109c <_init>
 800106c:	1b64      	subs	r4, r4, r5
 800106e:	10a4      	asrs	r4, r4, #2
 8001070:	2600      	movs	r6, #0
 8001072:	42a6      	cmp	r6, r4
 8001074:	d105      	bne.n	8001082 <__libc_init_array+0x2e>
 8001076:	bd70      	pop	{r4, r5, r6, pc}
 8001078:	f855 3b04 	ldr.w	r3, [r5], #4
 800107c:	4798      	blx	r3
 800107e:	3601      	adds	r6, #1
 8001080:	e7ee      	b.n	8001060 <__libc_init_array+0xc>
 8001082:	f855 3b04 	ldr.w	r3, [r5], #4
 8001086:	4798      	blx	r3
 8001088:	3601      	adds	r6, #1
 800108a:	e7f2      	b.n	8001072 <__libc_init_array+0x1e>
 800108c:	080010d8 	.word	0x080010d8
 8001090:	080010d8 	.word	0x080010d8
 8001094:	080010d8 	.word	0x080010d8
 8001098:	080010dc 	.word	0x080010dc

0800109c <_init>:
 800109c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800109e:	bf00      	nop
 80010a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010a2:	bc08      	pop	{r3}
 80010a4:	469e      	mov	lr, r3
 80010a6:	4770      	bx	lr

080010a8 <_fini>:
 80010a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010aa:	bf00      	nop
 80010ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010ae:	bc08      	pop	{r3}
 80010b0:	469e      	mov	lr, r3
 80010b2:	4770      	bx	lr
